buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.16.RELEASE'
    id "org.flywaydb.flyway" version "4.2.0"
    id "org.sonarqube" version "2.6.2"
    id "com.moowork.node" version "1.2.0"
    id 'com.avast.gradle.docker-compose' version '0.8.10'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = serviceGroup
version = serviceVersion
archivesBaseName = rootProject.name
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.sun.mail:javax.mail"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "org.postgresql:postgresql:42.0.0"
    compile "org.projectlombok:lombok:1.16.8"
    compile "org.slf4j:slf4j-ext:1.7.25"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-integration"
    compile "org.springframework.integration:spring-integration-jpa:4.3.2.RELEASE"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile 'com.google.guava:guava:23.3-jre'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-validator:commons-validator:1.6'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-csv:1.4'
    compile 'org.flywaydb:flyway-core:4.0.3'
    compile 'org.hibernate:hibernate-java8'
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'com.amazonaws:aws-java-sdk-s3:1.11.627'

    testCompile "be.joengenduvel.java.verifiers:to-string:1.0.2"
    testCompile "com.github.tomakehurst:wiremock:1.58"
    testCompile "com.jayway.restassured:rest-assured:2.7.0"
    testCompile "guru.nidi.raml:raml-tester:0.8.9"
    testCompile "junit:junit"
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.4"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.powermock:powermock-api-mockito:1.6.5"
    testCompile "org.powermock:powermock-module-junit4:1.6.5"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'io.rest-assured:json-schema-validator:3.0.0'
    testCompile 'io.rest-assured:rest-assured:3.0.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.0'
    testCompile 'org.awaitility:awaitility:3.1.6'
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
}

flyway {
    url = "$System.env.DATABASE_URL"
    user = "$System.env.POSTGRES_USER"
    password = "$System.env.POSTGRES_PASSWORD"
    schemas = ['notification']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

/*
 * Configures system and environment variables, for the given task, when said task is started
 * with docker-compose plugin providing services.
 */
ext.configureForDockerCompose = { task ->
    // source .env file for postgres username and password
    def envProps = new Properties()
    file('.env').withInputStream{ it -> envProps.load(it) }
    def postgresUser = envProps.getProperty('POSTGRES_USER')
    def postgresPass = envProps.getProperty('POSTGRES_PASSWORD')
    task.environment "POSTGRES_USER", postgresUser
    task.environment "POSTGRES_PASSWORD", postgresPass

    // source log host and port from docker compose
    def log = dockerCompose.servicesInfos.log.firstContainer
    task.systemProperty 'log.host', log.host
    task.systemProperty 'log.port', 514
    //task.systemProperty 'log.port', log.ports[514] this doesn't work yet https://github.com/avast/gradle-docker-compose-plugin/issues/176

    // source postgres host and port from docker compose
    def db = dockerCompose.servicesInfos.db.firstContainer
    task.environment "DATABASE_URL", "jdbc:postgresql://${db.host}:${db.port}/open_lmis"

    // source redis host and port from docker compose
    // def redis = dockerCompose.servicesInfos.redis.firstContainer
    // task.environment "REDIS_URL", redis.host
    // task.environment "REDIS_PORT", redis.ports[6379]
}

/*
 * Checking for docker is a proxy for determining if docker-compose should be used
 * to start needed services
 */
ext.checkForDocker = { ->
    def result = exec {
        def command = "command -v docker"
        ignoreExitValue = true
        executable "bash" args "-l", "-c", command
    }
    if (0 == result.getExitValue()) {
        println "has Docker"
        return true
    } else {
        println "Docker not found"
        return false
    }
}

dockerCompose {
    stopContainers = true
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter test
    environment 'BASE_URL', "http://localhost"

    exclude '**/migration/**'

    if (checkForDocker()) dockerCompose.isRequiredBy(integrationTest)
    doFirst {
        if(checkForDocker()) {
            configureForDockerCompose(integrationTest)
        }
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
}

task checkApiIsRaml(type:Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "8.12"
}

//Usage: gradle sonarqube
sonarqube {
    properties {
        def branch = System.getenv("SONAR_BRANCH")
        if (branch && branch != 'master') {
            property "sonar.branch", branch
        }
        property "sonar.projectName", "OpenLMIS Notification Service"
        property "sonar.projectKey", "org.sonarqube:$rootProject.name"
        property "sonar.host.url", "http://sonar.openlmis.org"
        property "sonar.projectVersion", version
        property "sonar.login", System.getenv("SONAR_LOGIN")
        property "sonar.password", System.getenv("SONAR_PASSWORD")
        property "sonar.java.coveragePlugin", "jacoco"
        //Tells SonarQube where the unit tests execution reports are
        property "sonar.junit.reportsPath", "build/test-results/test"
        //Tells SonarQube where the code coverage reports are
        property "sonar.jacoco.reportPaths", "build/jacoco/test.exec,build/jacoco/integrationTest.exec"
        properties["sonar.tests"] += sourceSets.integrationTest.java
    }
}

project.tasks["sonarqube"].dependsOn integrationTest

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    doLast {
        def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
        def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
        def fullFileName = "${timestamp}__${fileName}.sql"
        def migrationFile = new File(sourceSets.main.resources.srcDirs.first(), 'db/migration/' + fullFileName)
        migrationFile << "-- WHEN COMMITTING OR REVIEWING THIS FILE: Make sure that the timestamp in the file name (that serves as a version) is the latest timestamp, and that no new migration have been added in the meanwhile.\n"
        migrationFile << "-- Adding migrations out of order may cause this migration to never execute or behave in an unexpected way.\n"
        migrationFile << "-- Migrations should NOT BE EDITED. Add a new migration to apply changes."        
        migrationFile.createNewFile()
    }
}

test {
    testLogging {
        events 'passed'
        exceptionFormat = 'full'
    }
}

apply from: "documentation.gradle"
integrationTest.dependsOn copyRamlToBuild

processResources {
    finalizedBy npm_run_runApiHtmlConverter
    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

apply from: "registration.gradle"

assemble {
    dependsOn npm_run_runApiHtmlConverter
    dependsOn copyConsulRegistrationToBuild
    dependsOn jacocoTestReport
}
